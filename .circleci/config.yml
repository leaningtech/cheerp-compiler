version: 2.1

jobs:
  define-version-no:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - run: mkdir -p ~/project/packages
      - run:
          name: Define version
          command: |
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              export VERSION_NO=`echo << pipeline.parameters.release-tag >> | cut --complement -c1-7 | sed "s/rc/~rc/"`
            else
              export VERSION_NO=`date +%s`
            fi
            echo "export VERSION_NO=$VERSION_NO" >> packages/version
      - persist_to_workspace:
          root: ~/project/packages
          paths:
              - version
  build-cheerp-toolchain:
    executor: cheerp-large
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
      - THREADS: 6
      - CCACHE_DIR: "/ccache"
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Setup ccache
          command: |
            mkdir /ccache
      - when:
          condition:
            not:
              equal: [ master, << pipeline.git.branch >> ]
          steps:
            - restore_cache:
                name: Restore ccache
                keys:
                  - cheerp-compiler-<< pipeline.git.branch >>-
                  - cheerp-compiler-
      - run:
          name: Set up environment
          working_directory: ~/project/cheerp-compiler
          command: |
            cat ~/project/packages/version >> $BASH_ENV
      - clone-toolchain
      - run:
          name: Build cheerp
          working_directory: ~/project/cheerp-compiler
          command: |
            dch -b -v "$VERSION_NO-1" "Internal build" -m
            dpkg-buildpackage -d -b
            mkdir -p ~/project/packages
            mv -v ../cheerp-core_*.deb ~/project/packages
      - save_cache:
          name: Save ccache
          key: cheerp-compiler-<< pipeline.git.branch >>-{{ epoch }}
          paths:
            - /ccache
      - run:
          name: Save build
          working_directory: ~/project/cheerp-compiler
          command: ./debian/build.sh tar-compiler ../packages/cheerp-build.tar.bz2
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - cheerp-build.tar.bz2
            - cheerp-core_*.deb
  llvm-check:
    parameters:
      rule:
        type: string
    executor: cheerp-large
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
      - THREADS: 6
      - CCACHE_DISABLE: 1
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Extract build
          working_directory: ~/project/cheerp-compiler
          command: tar -C . -xvf ~/project/packages/cheerp-build.tar.bz2
      - run:
          name: Run llvm << parameters.rule >>
          working_directory: ~/project/cheerp-compiler
          command: ./debian/build.sh run-command << parameters.rule >>
  test:
    parameters:
      target:
        type: string
      asan:
        type: string
    executor: cheerp-large
    steps:
      - install-toolchain
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-utils.git
          dir: cheerp-utils
          ref: << pipeline.parameters.cheerp-utils-commit >>
      - run:
          name: Run tests
          working_directory: ~/project/cheerp-utils/tests
          command: ./run_tests.py --<< parameters.target >> << parameters.asan >> --determinism=3 --determinism-probability=0.2 "/opt/cheerp/bin/clang++" node -j4
          no_output_timeout: 30m
      - run:
          name: Store test results
          command: |
            mkdir -p ~/project/testResults
            mv ~/project/cheerp-utils/tests/testReport.test ~/project/<< parameters.target >><< parameters.asan >>testResults
      - store_artifacts:
          path: ~/project/<< parameters.target >><< parameters.asan >>testResults
  run-asan-tests:
    executor: cheerp-large
    environment:
      - VERBOSE: 1
    steps:
      - install-toolchain
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-compiler
          dir: cheerp-compiler
          ref: << pipeline.parameters.cheerp-compiler-commit >>
      - run:
          name: Install dependencies
          command: |
            # ubuntu jammy's llvm version is 14, however cheerp, as of the time of writing this, is based on llvm-16,
            # because of this it expects certain utility files to exists, which are not a part of llvm-14, therefore we
            # install here a more updated version of llvm, which has those utility files.
            apt remove -y clang
            apt update && apt install -y clang-15

            ln -s /usr/lib/llvm-14/bin/not /usr/bin
            ln -s /usr/lib/llvm-14/bin/FileCheck /usr/bin
            ln -s /usr/lib/llvm-14/bin/llvm-config /usr/bin
      - run:
          name: Setup tests
          working_directory: ~/project/cheerp-compiler/compiler-rt
          command: cmake -B build -C CheerpCmakeConf.cmake -DCMAKE_TOOLCHAIN_FILE="/opt/cheerp/share/cmake/Modules/CheerpWasmToolchain.cmake"
      - run:
          name: Check asan
          working_directory: ~/project/cheerp-compiler/compiler-rt/build
          command: make -j check-asan
  RPM-cheerp-toolchain:
    docker:
      - image: leaningtech/cheerp_rpm_base:9
    resource_class: large
    environment:
      - THREADS: 6
      - CCACHE_DISABLE: 1
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/version >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
            - "86:3b:c9:a6:d1:b9:a8:dc:0e:00:db:99:8d:19:c4:3e"
      - run:
          name: Add known hosts
          command: |
            echo $RPM_HOST >> ~/.ssh/known_hosts
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Set up environment
          working_directory: ~/
          command: |
            if [ << pipeline.parameters.release-tag >> != master ]; then
              echo "export CHAN=stable" >> $BASH_ENV
            else
              echo "export CHAN=nightly" >> $BASH_ENV
            fi
            export REPO_DIR=${PWD}/REPO
            echo "export REPO_DIR=$REPO_DIR" >> $BASH_ENV
            mkdir -p $REPO_DIR
      - run:
          name: Persist environment variables
          command: |
           echo "export CHAN=$CHAN" >> ~/version
           echo "export REPO_DIR=$REPO_DIR" >> ~/version
      - add-yum-configuration
      - get-rpm-repo
      - clone-toolchain
      - shallow-clone:
          ref: master
          dir: cheerp-internal
          remote: git@github.com:leaningtech/cheerp-internal.git
      - set-up-rpm-workspace
      - run:
          name: Setup tarball
          command: |
            cp -r cheerp-compiler/rpmbuild ~
            mv cheerp-compiler "cheerp-core-$VERSION_NO"
            tar -czvf "cheerp-core_$VERSION_NO.orig.tar.gz" \
              "cheerp-core-$VERSION_NO/clang" \
              "cheerp-core-$VERSION_NO/llvm" \
              "cheerp-core-$VERSION_NO/cmake" \
              "cheerp-core-$VERSION_NO/compiler-rt" \
              "cheerp-core-$VERSION_NO/libcxx" \
              "cheerp-core-$VERSION_NO/libcxxabi" \
              "cheerp-core-$VERSION_NO/runtimes" \
              "cheerp-core-$VERSION_NO/third-party" \
              "cheerp-core-$VERSION_NO/cheerp-libs" \
              "cheerp-core-$VERSION_NO/cheerp-musl" \
              "cheerp-core-$VERSION_NO/cheerp-utils" \
              "cheerp-core-$VERSION_NO/debian"
            mkdir ~/rpmbuild/SOURCES
            mv -v "cheerp-core_$VERSION_NO.orig.tar.gz" ~/rpmbuild/SOURCES
      - run:
          name: Build cheerp-toolchain
          working_directory: ~
          command: |
            sed -i "s/Version: .*/Version: $VERSION_NO/" ~/rpmbuild/SPECS/cheerp-core.spec
            rpmbuild -ba ~/rpmbuild/SPECS/cheerp-core.spec
            rpm --addsign ~/rpmbuild/RPMS/x86_64/cheerp-core-$VERSION_NO-1.el9.x86_64.rpm
      - run:
          name: Deploy rpm package
          command: |
            cp ~/rpmbuild/RPMS/x86_64/cheerp-core-$VERSION_NO-1.el9.x86_64.rpm "$REPO_DIR/$CHAN"
            . ~/project/cheerp-internal/tools/releasing/rpm_utils.sh
            repo_update
      - when:
          condition:
            equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - run:
                name: Remove old packages
                working_directory: ~/
                command: |
                  if [ ${CHAN} == 'nightly' ]; then
                    . ~/project/cheerp-internal/tools/releasing/rpm_utils.sh
                    repo_remove_old core
                    repo_update
                  fi
      - persist_to_workspace:
          root: ~/
          paths:
            - version/
  PPA:
    docker:
      - image: cimg/base:2022.04
    resource_class: medium
    environment:
      - LC_ALL: en_US.UTF-8
      - LANG: en_US.UTF-8
      - LANGUAGE: en_US.UTF-8
      - DISTRO: jammy
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Add environment
          command: |
            cat packages/version >> $BASH_ENV
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run: sudo apt-get update && sudo apt-get install -y debhelper cmake python3-distutils devscripts ninja-build clang lld python3-github
      - clone-toolchain
      - run:
          name: Set up workspace
          command: |
            mkdir pkg
            echo -e $GPG_KEY | gpg --import
            locale
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              echo "export CHANGELOG_MESSAGE="Release ${VERSION_NO}"" >> $BASH_ENV
              echo 'export PPA="ppa:leaningtech-dev/cheerp-ppa"' >> $BASH_ENV
            else
              echo 'export CHANGELOG_MESSAGE="Nightly build"' >> $BASH_ENV
              echo 'export PPA="ppa:leaningtech-dev/cheerp-nightly-ppa"' >> $BASH_ENV
            fi
      - run:
          name: Create tarballs
          working_directory: cheerp-compiler
          command: |
            tar -czvf ~/project/packages/cheerp-core_$VERSION_NO.orig-cheerp-libs.tar.gz cheerp-libs/
            tar -czvf ~/project/packages/cheerp-core_$VERSION_NO.orig-cheerp-musl.tar.gz cheerp-musl/
            tar -czvf ~/project/packages/cheerp-core_$VERSION_NO.orig-cheerp-utils.tar.gz cheerp-utils/
            tar -czvf ~/project/packages/cheerp-core_$VERSION_NO.orig.tar.gz clang/ llvm/ cmake/ compiler-rt/ libcxx/ libcxxabi/ \
              runtimes/ third-party/ debian/
      - run:
          name: Package cheerp toolchain
          no_output_timeout: 30m
          command: |
            rm -rf cheerp-compiler/

            cp ~/project/packages/cheerp-core_$VERSION_NO.orig-cheerp-libs.tar.gz .
            cp ~/project/packages/cheerp-core_$VERSION_NO.orig-cheerp-musl.tar.gz .
            cp ~/project/packages/cheerp-core_$VERSION_NO.orig-cheerp-utils.tar.gz .
            cp ~/project/packages/cheerp-core_$VERSION_NO.orig.tar.gz .

            mkdir "cheerp-core-$VERSION_NO"
            cd "cheerp-core-$VERSION_NO"

            tar -xvf ../cheerp-core_$VERSION_NO.orig-cheerp-libs.tar.gz
            tar -xvf ../cheerp-core_$VERSION_NO.orig-cheerp-musl.tar.gz
            tar -xvf ../cheerp-core_$VERSION_NO.orig-cheerp-utils.tar.gz
            tar -xvf ../cheerp-core_$VERSION_NO.orig.tar.gz

            dch -D ${DISTRO} -b -v ${VERSION_NO}-1~${DISTRO} "${CHANGELOG_MESSAGE}" -m
            env -i HOME="$HOME" LC_CTYPE="${LC_ALL:-${LC_CTYPE:-$LANG}}" PATH="$PATH" USER="$USER" debuild -sa -S -kB5208673E6848661 --lintian-opts -v
            cp ../*.dsc ~/project/packages
            cp ../*.changes ~/project/packages
            cp ../*.xz ~/project/packages
      - run:
          name: Publish
          command: |
            dput "$PPA" cheerp-core_*.changes
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              cp cheerp-core_${VERSION_NO}.orig.tar.gz cheerp-core-${VERSION_NO}.tar.gz
              python3 ../cheerp-internal/tools/releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" cheerp-core-${VERSION_NO}.tar.gz cheerp-core-${VERSION_NO}.tar.gz
            fi
  build-cheerp-headers-and-libs:
    executor: cheerp-medium
    steps:
      - attach_workspace:
          at: packages
      - install-toolchain
      - run:
          name: Set up workspace
          command: |
            cat ~/project/packages/version >> $BASH_ENV
            mkdir -p /opt/cheerp/
      - add_ssh_keys:
          fingerprints:
            - "86:3b:c9:a6:d1:b9:a8:dc:0e:00:db:99:8d:19:c4:3e"
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $RPM_HOST >> ~/.ssh/known_hosts
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Clone dependencies
          command: |
            git clone git@github.com:leaningtech/cheerp-libs-addon.git
      - clone-toolchain
      - run:
          name: Build libraries
          working_directory: ~/project/cheerp-compiler
          environment:
            - CHEERP_DIR: "/opt/cheerp"
          command: |
            # see run-asan-tests step for more info
            apt remove -y clang
            apt update && apt install -y clang-15

            export CHEERP_DEST="$PWD"
            ./debian/build.sh all-libs
            ./debian/build.sh install
      - run:
          name: Add licences
          working_directory: ~/project/cheerp-compiler
          command: |
            gzip -c libcxx/LICENSE.TXT > opt/cheerp/LICENSE.TXT.cheerp-libcxx.gz
            gzip -c libcxxabi/LICENSE.TXT > opt/cheerp/LICENSE.TXT.cheerp-libcxxabi.gz
            gzip -c cheerp-musl/COPYRIGHT > opt/cheerp/COPYRIGHT.musl.gz
            gzip -c cheerp-libs/LICENSE.TXT > opt/cheerp/LICENSE.TXT.cheerp-libs.gz
      - run:
          name: build cheerp-libs-addon
          working_directory: ~/project/cheerp-libs-addon
          command: |
            mkdir build_genericjs
            cd build_genericjs
            cmake -DCMAKE_INSTALL_PREFIX="../cheerp-compiler/opt/cheerp/" -DCMAKE_BUILD_TYPE=Release -DCHEERP_LINEAR_OUTPUT="" -DCMAKE_TOOLCHAIN_FILE=/opt/cheerp/share/cmake/Modules/CheerpToolchain.cmake -DCHEERP_MODE=genericjs ..
            make
            make install
            cd ..
            mkdir build_asmjs
            cd build_asmjs
            # Using the CheerpToolchain here is intended
            cmake -DCMAKE_INSTALL_PREFIX="../cheerp-compiler/opt/cheerp/" -DCMAKE_BUILD_TYPE=Release -DCHEERP_LINEAR_OUTPUT="" -DCMAKE_TOOLCHAIN_FILE=/opt/cheerp/share/cmake/Modules/CheerpToolchain.cmake -DCHEERP_MODE=asmjs ..
            make
            make install
      - when:
          condition:
            not:
              equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - run:
                name: Upload memprofui.js
                working_directory: ~/project/cheerp-libs-addon/
                command: scp -P 2223 build_asmjs/memprofui.js leaningtech@136.243.170.209:/srv/web/cheerp/
      - run:
          name: Generate libs packages
          working_directory: ~/project
          command: |
            tar -cvjf packages/cheerp-headers-and-libs-${VERSION_NO}.tar.bz2 -C cheerp-compiler/opt/cheerp .
            tar -cvjf packages/cheerp-headers-and-libs-${VERSION_NO}-proprietary.tar.bz2 -C cheerp-compiler/opt/cheerp .
      - persist_to_workspace:
          root: packages
          paths:
            - cheerp-headers-and-libs-*.tar.bz2
            - cheerp-headers-and-libs-*-proprietary.tar.bz2
  build-macos:
    docker:
      - image: leaningtech/cheerp_macos_base:20.04
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
    resource_class: large
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Set up workspace
          command: |
            mkdir /opt/cheerp/
            mkdir -p ~/project/Applications
            cat ~/project/packages/version >> $BASH_ENV
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-compiler
          dir: cheerp-compiler
          ref: << pipeline.parameters.cheerp-compiler-commit >>
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-utils
          dir: cheerp-utils
          ref: << pipeline.parameters.cheerp-utils-commit >>
      - shallow-clone:
          remote: git@github.com:leaningtech/cheerp-internal.git
          dir: cheerp-internal
          ref: master
      - run:
          name: Build osxcross
          working_directory: /osxcross
          command: |
            cp ~/project/cheerp-internal/tools/circleci/macos/MacOSX11.3.sdk.tar.xz tarballs/
            UNATTENDED=1 ./build.sh
      - build-tblgen
      - run:
          name: Build cheerp-compiler
          working_directory: ~/project/cheerp-compiler
          command: |
            mkdir build
            cd build
            cmake -C ../llvm/CheerpCmakeConf.cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=../../cheerp-internal/tools/circleci/macos/MacCrossToolchain.cmake \
              -DLLVM_HOST_TRIPLE=x86_64-apple-darwin \
              -DLLVM_ENABLE_THREADS=OFF \
              -DCMAKE_CROSSCOMPILING=True \
              -DCLANG_VENDOR="Cheerp ${VERSION_NO}" \
              -DCMAKE_INSTALL_PREFIX=/Applications/cheerp/ \
              -DLLVM_ENABLE_LIBCXX=ON \
              -DLLVM_ENABLE_PROJECTS=clang \
              ../llvm/ \
              -GNinja \
              -DLLVM_TABLEGEN=../build-tblgen/bin/llvm-tblgen \
              -DCLANG_TABLEGEN=../build-tblgen/bin/clang-tblgen
            ninja -j6 distribution
            DESTDIR=~/project ninja install-distribution
      - run:
          name: Create macos package
          working_directory: ~/project/cheerp-compiler/build
          command: |
            cp -v ../llvm/LICENSE.TXT ~/project/Applications/cheerp/LICENSE.TXT.cheerp-llvm-clang
            tar -xf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}.tar.bz2 -C ~/project/Applications/cheerp

            rm -rf cheerp-utils-build
            mkdir cheerp-utils-build
            cd cheerp-utils-build
            cmake -DCMAKE_INSTALL_PREFIX=/Applications/cheerp/ ~/project/cheerp-utils/
            cd ..
            make -C cheerp-utils-build
            cp cheerp-utils-build/CheerpCommon.cmake ~/project/Applications/cheerp/share/cmake/Modules/
            cp cheerp-utils-build/CheerpToolchain.cmake ~/project/Applications/cheerp/share/cmake/Modules/
            cp cheerp-utils-build/CheerpWasmToolchain.cmake ~/project/Applications/cheerp/share/cmake/Modules/
            cp cheerp-utils-build/cheerpwrap ~/project/Applications/cheerp/bin/
            tar -cvjf ~/project/packages/cheerp-macosx-${VERSION_NO}.tar.bz2 -C ~/project/Applications/ cheerp
      - persist_to_workspace:
          root: packages
          paths:
            - cheerp-macosx-*.tar.bz2
  build-windows:
    docker:
      - image: leaningtech/cheerp_win_base:20.04
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
    resource_class: large
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Set up workspace
          command: |
            cat ~/project/packages/version >> $BASH_ENV
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-compiler
          dir: cheerp-compiler
          ref: << pipeline.parameters.cheerp-compiler-commit >>
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-utils
          dir: cheerp-utils
          ref: << pipeline.parameters.cheerp-utils-commit >>
      - shallow-clone:
          remote: git@github.com:leaningtech/cheerp-internal.git
          dir: cheerp-internal
          ref: master
      - build-tblgen
      - run:
          name: Build cheerp-compiler
          working_directory: ~/project/cheerp-compiler
          command: |
            mkdir build
            cd build
            cmake \
              -C ~/project/cheerp-compiler/llvm/CheerpCmakeConf.cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=~/project/cheerp-internal/tools/windows_crosscompile/Mingw.cmake \
              -DCMAKE_CXX_FLAGS_RELEASE="-static-libgcc -static-libstdc++ -static -DNDEBUG" \
              -DCMAKE_C_FLAGS_RELEASE="-static-libgcc -static-libstdc++ -static -DNDEBUG" \
              -DCMAKE_INSTALL_PREFIX="c:\cheerp" \
              -DCLANG_VENDOR="Cheerp ${VERSION_NO}" \
              -DLLVM_ENABLE_PIC=OFF \
              -DLLVM_ENABLE_THREADS=OFF \
              -DCMAKE_EXE_LINKER_FLAGS="-Wl,--large-address-aware" \
              -DLLVM_ENABLE_PROJECTS=clang \
              -DLLVM_INCLUDE_BENCHMARKS=OFF \
              -GNinja ../llvm/ \
              -DLLVM_TABLEGEN=../build-tblgen/bin/llvm-tblgen \
              -DCLANG_TABLEGEN=../build-tblgen/bin/clang-tblgen
            ninja -j6 distribution
      - run:
          name: Install distrubution
          working_directory: ~/project/cheerp-compiler/build
          command: |
            cmake -DCMAKE_INSTALL_COMPONENT="opt" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="clang-resource-headers" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="clang" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="llc" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="llvm-dis" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="llvm-link" -P cmake_install.cmake
      - run:
          name: Add includes and libraries
          working_directory: ~/project/cheerp-compiler/build
          command: |
            tar -xvf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}.tar.bz2 -C "c:/cheerp/"
            cp -v ~/project/cheerp-compiler/llvm/LICENSE.TXT "c:/cheerp/LICENSE.TXT.cheerp-llvm-clang"
      - run:
          name: Build cheerp-utils
          working_directory: ~/project/cheerp-compiler/build
          command: |
            mkdir cheerp-utils-build
            cd cheerp-utils-build
            cmake -DCMAKE_INSTALL_PREFIX="c:\cheerp" ~/project/cheerp-utils/
            make
      - run:
          name: Override cheerp-utils files
          working_directory: ~/project/cheerp-compiler/build
          command: |
            sed -i "s@/@\\\\\\\\@g" cheerp-utils-build/CheerpToolchain.cmake
            sed -i "s@/@\\\\\\\\@g" cheerp-utils-build/CheerpCommon.cmake
            sed -i "s@/@\\\\\\\\@g" cheerp-utils-build/CheerpWasmToolchain.cmake
            cp cheerp-utils-build/CheerpCommon.cmake "c:/cheerp/share/cmake/Modules/"
            cp cheerp-utils-build/CheerpToolchain.cmake "c:/cheerp/share/cmake/Modules/"
            cp cheerp-utils-build/CheerpWasmToolchain.cmake "c:/cheerp/share/cmake/Modules/"
      - run:
          name: Manually patch executable paths
          working_directory: ~/project/cheerp-compiler/build
          command: |
            sed -i "s/clang /clang.exe /g" "c:/cheerp/share/cmake/Modules/CheerpCommon.cmake"
            sed -i "s/clang++ /clang++.exe /g" "c:/cheerp/share/cmake/Modules/CheerpCommon.cmake"
            sed -i "s/llvm-link /llvm-link.exe /g" "c:/cheerp/share/cmake/Modules/CheerpCommon.cmake"
            cp cheerp-utils-build/cheerpwrap "c:/cheerp/bin/"
      - run:
          name: Create windows archive
          working_directory: ~/project/cheerp-compiler/build/c:/
          command: |
            zip -r ~/project/packages/cheerp-win-${VERSION_NO}.zip cheerp/
      - persist_to_workspace:
          root: packages
          paths:
            - cheerp-win-*.zip
  cheerp-proprietary-package:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Set up workspace
          command: |
            sudo mkdir -p /opt/cheerp/
            cat ~/project/packages/version >> $BASH_ENV
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Get dependencies
          command: |
            git clone git@github.com:leaningtech/cheerp-internal.git
      - run: mkdir macos
      - run:
          name: Create proprietary package for Macosx
          working_dir: ~/project/macos
          command: |
            tar -xf ~/project/packages/cheerp-macosx-${VERSION_NO}.tar.bz2
      - run:
          name: Overwrite headers and licenses
          working_dir: ~/project/macos
          command: |
            tar -C cheerp -xf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}-proprietary.tar.bz2
      - run:
          name: Overwrite LLVM/clang license
          working_dir: ~/project/macos
          command: |
            cp -v ~/project/cheerp-internal/tools/releasing/LICENSE.TXT.cheerp-llvm-clang.proprietary cheerp/LICENSE.TXT-cheerp-llvm-clang
      - run:
          name: Create proprietary tarball for macos
          working_dir: ~/project/macos
          command: |
            tar -cvjf ~/project/packages/cheerp-macosx-${VERSION_NO}-proprietary.tar.bz2 cheerp
      - run: mkdir linux
      - run:
          name: Make package for linux
          working_directory: ~/project/linux
          command: |
            dpkg -x ~/project/packages/cheerp-core_${VERSION_NO}-*.deb .
            tar -C opt/cheerp -xf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}-proprietary.tar.bz2
            cp -v ~/project/cheerp-internal/tools/releasing/LICENSE.TXT.cheerp-llvm-clang.proprietary opt/cheerp/LICENSE.TXT-cheerp-llvm-clang
      - run:
          name: Create proprietary tarball for linux
          working_directory: ~/project/linux
          command: |
            tar -C opt/ -cvjf ~/project/packages/cheerp-linux-${VERSION_NO}-proprietary.tar.bz2 cheerp
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - cheerp-macosx-*-proprietary.tar.bz2
            - cheerp-linux-*-proprietary.tar.bz2
  create-dmg:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Set up workspace
          command: |
            sudo mkdir -p /opt/cheerp/
            sudo mkdir /dmg
            cat ~/project/packages/version >> $BASH_ENV
      - run: sudo apt-get update && sudo apt-get install linux-modules-extra-$(uname -r) cmake make python3-github
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Clone dependencies
          command: |
              git clone git@github.com:leaningtech/cheerp-internal.git
      - run:
          name: Set up libdmg-hfsplus
          command: |
            git clone https://github.com/leaningtech/libdmg-hfsplus.git
            cd libdmg-hfsplus
            cmake -DENABLE_SSL=False .
            make
      - mount-template-dmg
      - unpack-macos:
          package-name: ""
      - unmount-and-package:
          package-name: ""
      - mount-template-dmg
      - unpack-macos:
          package-name: "-proprietary"
      - unmount-and-package:
          package-name: "-proprietary"
      - run:
          name: Compress DMGs
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            ~/project/libdmg-hfsplus/dmg/dmg dmg cheerp-macosx-${VERSION_NO}-uncompressed.dmg cheerp-macosx-${VERSION_NO}.dmg
            ~/project/libdmg-hfsplus/dmg/dmg dmg cheerp-macosx-${VERSION_NO}-proprietary-uncompressed.dmg cheerp-macosx-${VERSION_NO}-proprietary.dmg
      - run:
          name: Store DMGs
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            cp cheerp-macosx-${VERSION_NO}.dmg ~/project/packages
            cp cheerp-macosx-${VERSION_NO}-proprietary.dmg ~/project/packages
      - when:
          condition:
            not:
              equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - run:
                name: Upload to Github
                working_directory: ~/project/cheerp-internal/tools/macosx_package
                command: |
                  python3 -m pip install pygithub
                  python3 ../releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" cheerp-macosx-${VERSION_NO}.dmg cheerp-macosx-${VERSION_NO}.dmg
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - cheerp-macosx-*.dmg
            - cheerp-macosx-*-proprietary.dmg
  create-windows-exe:
    docker:
      - image: leaningtech/cheerp_win_base:20.04
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Set up workspace
          command: |
            mkdir -p /opt/cheerp/
            cat ~/project/packages/version >> $BASH_ENV
      - run: apt-get update && apt-get install -y python3-github
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Clone dependencies
          command: |
              git clone git@github.com:leaningtech/cheerp-internal.git
      - run:
          name: Create windows package
          working_directory: ~/project/cheerp-internal/tools/windows_package
          command: |
            unzip ~/project/packages/cheerp-win-${VERSION_NO}.zip
            echo ${VERSION_NO}
            cmake -DCHEERP_VERSION=${VERSION_NO} .
            make package
            cp Cheerp-${VERSION_NO}-Windows.exe ~/project/packages/
      - when:
          condition:
            not:
              equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - run:
                name: Upload to Github
                working_directory: ~/project/cheerp-internal/tools/windows_package
                command: python3 ../releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" Cheerp-${VERSION_NO}-Windows.exe Cheerp-${VERSION_NO}-Windows.exe
      - run:
          name: Create commercial package
          working_directory: ~/project/cheerp-internal/tools/windows_package
          command: |
            tar -C cheerp/ -xf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}-proprietary.tar.bz2
            cp ../releasing/LICENSE.TXT.cheerp-llvm-clang.proprietary cheerp/LICENSE.TXT.cheerp-llvm-clang
            cmake -DCHEERP_VERSION=$VERSION_NO . -DCHEERP_PROPRIETARY=1
            make package
            mv Cheerp-${VERSION_NO}-Windows.exe ~/project/packages/Cheerp-${VERSION_NO}-Windows-proprietary.exe
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - Cheerp-*-Windows.exe
            - Cheerp-*-Windows-proprietary.exe
  store-results:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/project/packages
      - store_artifacts:
          path: ~/project/packages

commands:
  shallow-clone:
    parameters:
      ref:
        type: string
      dir:
        type: string
      remote:
        type: string
    steps:
      - run:
          name: Create directory << parameters.dir >> for repository
          command: mkdir -p << parameters.dir >>
      - run:
          working_directory: << parameters.dir >>
          name: Initialize << parameters.dir >>
          command: |
            git --version
            git init
            git remote add origin << parameters.remote >>
      - run:
          working_directory: << parameters.dir >>
          name: Fetch from << parameters.remote >> at ref << parameters.ref >>
          command: git fetch --progress --depth=1 origin << parameters.ref >>
      - run:
          working_directory: << parameters.dir >>
          name: Checkout << parameters.ref >>
          command: git checkout --progress --force FETCH_HEAD
  clone-cheerp-repo:
    description: "A helper command that shallowly clones the a cheerp-* repo based on the pipeline parameters"
    parameters:
      remote:
        type: string
      dir:
        type: string
      ref:
        type: string
    steps:
      - when:
          condition:
            equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - shallow-clone:
                ref: << parameters.ref >>
                dir: << parameters.dir >>
                remote: << parameters.remote >>
      - when:
          condition:
            not:
              equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - shallow-clone:
                ref: << pipeline.parameters.release-tag >>
                dir: << parameters.dir >>
                remote: << parameters.remote >>
  clone-toolchain:
    steps:
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-compiler
          dir: cheerp-compiler
          ref: << pipeline.parameters.cheerp-compiler-commit >>
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-utils
          dir: cheerp-compiler/cheerp-utils
          ref: << pipeline.parameters.cheerp-utils-commit >>
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-musl
          dir: cheerp-compiler/cheerp-musl
          ref: << pipeline.parameters.cheerp-musl-commit >>
      - clone-cheerp-repo:
          remote: https://github.com/leaningtech/cheerp-libs
          dir: cheerp-compiler/cheerp-libs
          ref: << pipeline.parameters.cheerp-libs-commit >>
  install-toolchain:
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Install cheerp toolchain
          command: dpkg -i ~/project/packages/cheerp-core_*.deb
  add-yum-configuration:
    steps:
      - run:
          name: Add yum configuration
          command: |
            if [ << pipeline.parameters.release-tag >> != "master" ]; then

            cat \<< EOF > /etc/yum.repos.d/cheerp.repo
            [Cheerp-Stable]
            name=Cheerp Stable
            gpgcheck=1
            gpgkey=https://rpm.leaningtech.com/RPM-GPG-KEY-leaningtech
            enabled=1
            baseurl=https://rpm.leaningtech.com/stable
            EOF

            else

            cat \<< EOF > /etc/yum.repos.d/cheerp.repo
            [Cheerp-Nightly]
            name=Cheerp Nightly
            gpgcheck=1
            gpgkey=https://rpm.leaningtech.com/RPM-GPG-KEY-leaningtech
            enabled=1
            baseurl=https://rpm.leaningtech.com/nightly
            EOF

            fi
  set-up-rpm-workspace:
    steps:
      - run:
          name: Set up workspace
          command: |
            mkdir pkg
            echo -e $GPG_KEY | gpg --import
            echo -e $PUBLIC_GPG_KEY > public
            rpm --import public
            rm public
            echo "%_signature gpg" >> ~/.rpmmacros
            echo "%_gpg_name ci@leaningtech.com" >> ~/.rpmmacros
  get-rpm-repo:
    steps:
     - run:
          working_directory: ~/
          command: |
              rsync -a --delete-after -e 'ssh -p 2223' leaningtech@136.243.170.209:/srv/web/rpm/$CHAN ${REPO_DIR}/
  build-tblgen:
    steps:
      - run:
          name: Build tablegen
          working_directory: ~/project/cheerp-compiler
          command: |
            mkdir build-tblgen
            cd build-tblgen
            cmake -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Release ../llvm/ -GNinja
            ninja llvm-tblgen clang-tblgen
  mount-template-dmg:
    steps:
      - run:
          name: Mount template DMG
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            tar xjf cheerp-macosx-template.tar.bz2
            sudo mount $PWD/cheerp-macosx-template.dmg /dmg
  unpack-macos:
    parameters:
      package-name:
        type: string
    steps:
      - run:
          name: Unpack macox<< parameters.package-name >> package
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            sudo tar --no-overwrite-dir -xvjmf ~/project/packages/cheerp-macosx-${VERSION_NO}<< parameters.package-name >>.tar.bz2 -C /dmg
  unmount-and-package:
    parameters:
      package-name:
        type: string
    steps:
      - run:
          name: Unmount and package uncompressed DMG<< parameters.package-name >>
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            sudo umount /dmg
            mv cheerp-macosx-template.dmg cheerp-macosx-${VERSION_NO}<< parameters.package-name >>-uncompressed.dmg

parameters:
  release-tag:
    type: string
    default: "master"
  cheerp-compiler-commit:
    type: string
    default: << pipeline.git.revision >>
  cheerp-utils-commit:
    type: string
    default: "master"
  cheerp-musl-commit:
    type: string
    default: "master"
  cheerp-libs-commit:
    type: string
    default: "master"

executors:
  cheerp-large:
    docker:
      - image: leaningtech/cheerp_ci_base:22.04
    resource_class: large
  cheerp-medium:
    docker:
      - image: leaningtech/cheerp_ci_base:22.04
    resource_class: medium

workflows:
  build-cheerp-toolchain:
    jobs:
      - define-version-no
      - build-cheerp-toolchain:
          requires:
            - define-version-no
      - llvm-check:
          matrix:
            parameters:
              rule: ["check-llvm", "check-clang"]
          requires:
            - build-cheerp-toolchain
      - test:
          matrix:
            parameters:
              target: ["genericjs", "asmjs", "wasm", "preexecute", "preexecute-asmjs"]
              asan: ["", "--asan"]
            exclude:
              - target: "genericjs"
                asan: "--asan"
              - target: "preexecute"
                asan: "--asan"
          requires:
            - build-cheerp-toolchain
      - run-asan-tests:
          requires:
            - build-cheerp-toolchain
      - RPM-cheerp-toolchain:
          requires:
            - define-version-no
            - test
            - run-asan-tests
            - llvm-check
          filters:
            branches:
              only: master
      - PPA:
          requires:
            - define-version-no
            - test
            - run-asan-tests
            - llvm-check
          filters:
            branches:
              only: master
      - build-cheerp-headers-and-libs:
          requires:
            - build-cheerp-toolchain
          filters:
            branches:
              only: master
      - build-macos:
          requires:
            - build-cheerp-headers-and-libs
      - build-windows:
          requires:
            - build-cheerp-headers-and-libs
      - cheerp-proprietary-package:
          requires:
            - build-cheerp-headers-and-libs
            - build-macos
      - create-dmg:
          requires:
            - build-macos
            - cheerp-proprietary-package
      - create-windows-exe:
          requires:
            - build-windows
      - store-results:
          requires:
            - create-dmg
            - create-windows-exe
