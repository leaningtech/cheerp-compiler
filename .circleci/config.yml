version: 2.1

jobs:
  define-version-no:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - run: mkdir -p ~/project/packages
      - run:
          name: Define version
          command: |
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              export VERSION_NO=`echo << pipeline.parameters.release-tag >> | cut --complement -c1-7 | sed "s/rc/~rc/"`
            else
              export VERSION_NO=`date +%s`
            fi
            echo "export VERSION_NO=$VERSION_NO" >> packages/version
      - persist_to_workspace:
          root: ~/project/packages
          paths:
              - version
  build-cheerp-compiler:
    docker:
      - image: leaningtech/cheerp_ci_base:20.04
    resource_class: large
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
      - THREADS: "6"
      - CCACHE_DIR: "/ccache"
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Setup ccache
          command: |
            mkdir /ccache
      - restore_cache:
          name: Restore ccache
          keys:
            - cheerp-compiler-<< pipeline.git.branch >>-
            - cheerp-compiler-
      - run:
          name: Clone Cheerp
          command: |
            git clone https://github.com/leaningtech/cheerp-compiler.git
            cd cheerp-compiler
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              git checkout << pipeline.parameters.release-tag >>
            else
              git checkout << pipeline.parameters.cheerp-compiler-commit >>
            fi
      - run:
          name: Set up environment
          working_directory: ~/project/cheerp-compiler
          command: |
            cat ~/project/packages/version >> $BASH_ENV
      - build-internal:
          directory: cheerp-compiler
          package-name: llvm-clang
      - save_cache:
          name: Save ccache
          key: cheerp-compiler-<< pipeline.git.branch >>-{{ epoch }}
          paths:
            - /ccache
      - run:
          name: Save build
          working_directory: ~/project/cheerp-compiler
          command: tar -cjf ~/project/packages/cheerp-build.tar.bz2 build cmake third-party llvm clang .git/logs/HEAD
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - cheerp-llvm-clang_*.deb
            - cheerp-build.tar.bz2
  llvm-check:
    parameters:
      rule:
        type: string
    docker:
      - image: leaningtech/cheerp_ci_base:20.04
    resource_class: large
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
      - CCACHE_DISABLE: 1
    steps:
      - run-llvm-tests:
          rule: << parameters.rule >>
  build-libraries:
    docker:
      - image: leaningtech/cheerp_ci_base:20.04
    resource_class: medium
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Get repos
          command: |
            git clone https://github.com/leaningtech/cheerp-compiler.git
            git clone https://github.com/leaningtech/cheerp-utils.git
            git clone https://github.com/leaningtech/cheerp-libs.git
            git clone https://github.com/leaningtech/cheerp-musl.git
            if [ << pipeline.parameters.release-tag >> != master ]; then
              cd cheerp-compiler && git checkout << pipeline.parameters.release-tag >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.release-tag >> && cd ..
              cd cheerp-libs && git checkout << pipeline.parameters.release-tag >> && cd ..
              cd cheerp-musl && git checkout << pipeline.parameters.release-tag >>
            else
              cd cheerp-compiler && git checkout << pipeline.parameters.cheerp-compiler-commit >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.cheerp-utils-commit >> && cd ..
              cd cheerp-libs && git checkout << pipeline.parameters.cheerp-libs-commit >> && cd ..
              cd cheerp-musl && git checkout << pipeline.parameters.cheerp-musl-commit >>
            fi
      - run:
          name: Set up workspace
          command: |
            cat ~/project/packages/version >> $BASH_ENV
            mkdir /opt/cheerp/
      - install-deb:
          package-name: llvm-clang
      - create-deb:
          directory: cheerp-utils
          package-name: utils
      - create-deb:
          directory: cheerp-musl
          package-name: musl
      - run:
          name: Set up for libcxx-libcxxabi
          working_directory: ~/project/cheerp-compiler
          command: |
            rm -rf debian/
            cp -rv runtimes/debian debian/
      - create-deb:
          directory: cheerp-compiler
          package-name: libcxx-libcxxabi
      - build-internal:
          directory: cheerp-libs
          package-name: libs
      - persist_to_workspace:
          root: packages
          paths:
            - cheerp-utils_*.deb
            - cheerp-musl_*.deb
            - cheerp-libcxx-libcxxabi_*.deb
            - cheerp-libs_*.deb
  test:
    parameters:
      target:
        type: string
    docker:
      - image: leaningtech/cheerp_ci_base:20.04
    resource_class: large
    steps:
      - run-cheerp-tests:
          target: << parameters.target >>
  RPM-cheerp-compiler:
    docker:
      - image: leaningtech/cheerp_rpm_base:8
    resource_class: large
    environment:
      - THREADS: 6
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/version >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
            - "86:3b:c9:a6:d1:b9:a8:dc:0e:00:db:99:8d:19:c4:3e"
      - run:
          name: Add known hosts
          command: |
            echo $RPM_HOST >> ~/.ssh/known_hosts
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Set up environment
          working_directory: ~/
          command: |
            if [ << pipeline.parameters.release-tag >> != master ]; then
              echo "export CHAN=stable" >> $BASH_ENV
            else
              echo "export CHAN=nightly" >> $BASH_ENV
            fi
            export REPO_DIR=${PWD}/REPO
            echo "export REPO_DIR=$REPO_DIR" >> $BASH_ENV
            mkdir -p $REPO_DIR
      - run:
          name: Persist environment variables
          command: |
           echo "export CHAN=$CHAN" >> ~/version
           echo "export REPO_DIR=$REPO_DIR" >> ~/version
      - add-yum-configuration
      - get-rpm-repo
      - run:
          name: Get sources
          command: |
            git clone git@github.com:leaningtech/cheerp-internal.git
            git clone https://github.com/leaningtech/cheerp-compiler.git cheerp-llvm-clang
            cd cheerp-llvm-clang
            if [ << pipeline.parameters.release-tag >> != master ]; then
              git checkout << pipeline.parameters.release-tag >>
            else
              git checkout << pipeline.parameters.cheerp-compiler-commit >>
            fi
      - set-up-rpm-workspace
      - add-rpm-sources:
          directory: cheerp-llvm-clang
          package-name: llvm-clang
          branch-name: << pipeline.parameters.cheerp-compiler-commit >>
      - build-deploy-rpm:
          directory: cheerp-llvm-clang
          package-name: llvm-clang
      - persist_to_workspace:
          root: ~/
          paths:
            - version/
  RPM-libraries:
    docker:
      - image: leaningtech/cheerp_rpm_base:8
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/version >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
            - "86:3b:c9:a6:d1:b9:a8:dc:0e:00:db:99:8d:19:c4:3e"
      - run:
          name: Add known hosts
          command: |
            echo $GH_HOST >> ~/.ssh/known_hosts
            echo $RPM_HOST >> ~/.ssh/known_hosts
      - run:
          name: Get repos
          command: |
            git clone git@github.com:leaningtech/cheerp-internal.git
            git clone https://github.com/leaningtech/cheerp-compiler.git
            git clone https://github.com/leaningtech/cheerp-utils.git
            git clone https://github.com/leaningtech/cheerp-libs.git
            git clone https://github.com/leaningtech/cheerp-musl.git
            if [ << pipeline.parameters.release-tag >> != master ]; then
              cd cheerp-compiler && git checkout << pipeline.parameters.release-tag >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.release-tag >> && cd ..
              cd cheerp-libs && git checkout << pipeline.parameters.release-tag >> && cd ..
              cd cheerp-musl && git checkout << pipeline.parameters.release-tag >>
            else
              cd cheerp-compiler && git checkout << pipeline.parameters.cheerp-compiler-commit >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.cheerp-utils-commit >> && cd ..
              cd cheerp-libs && git checkout << pipeline.parameters.cheerp-libs-commit >> && cd ..
              cd cheerp-musl && git checkout << pipeline.parameters.cheerp-musl-commit >>
            fi
      - get-rpm-repo
      - add-yum-configuration
      - set-up-rpm-workspace
      - run: dnf install -y cheerp-llvm-clang-${VERSION_NO}-1.el8
      - create-rpm-package:
          directory: cheerp-utils
          package-name: utils
          branch-name: << pipeline.parameters.cheerp-utils-commit >>
      - create-rpm-package:
          directory: cheerp-musl
          package-name: musl
          branch-name: << pipeline.parameters.cheerp-musl-commit >>
      - run:
          name: Set up for libcxx-libcxxabi
          working_directory: ~/project/cheerp-compiler
          command: |
            rm -rf rpmbuild
            cp -r runtimes/rpmbuild .
      - create-rpm-package:
          directory: cheerp-compiler
          package-name: libcxx-libcxxabi
          branch-name: << pipeline.parameters.cheerp-compiler-commit >>
      - create-rpm-package:
          directory: cheerp-libs
          package-name: libs
          branch-name: << pipeline.parameters.cheerp-libs-commit >>
      - build-deploy-rpm:
          directory: cheerp-internal/tools/releasing/cheerp-core
          package-name: core
      - when:
          condition:
            equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - run:
                name: Remove old packages
                working_directory: ~/
                command: |
                  if [ ${CHAN} == 'nightly' ]; then
                    . ~/project/cheerp-internal/tools/releasing/rpm_utils.sh
                    repo_remove_old llvm-clang
                    repo_remove_old utils
                    repo_remove_old musl
                    repo_remove_old libcxx-libcxxabi
                    repo_remove_old libs
                    repo_remove_old core
                    repo_update
                  fi
  PPA:
    docker:
      - image: cimg/base:2021.04
    resource_class: medium
    environment:
      - LC_ALL: en_US.UTF-8
      - LANG: en_US.UTF-8
      - LANGUAGE: en_US.UTF-8
      - DISTRO: focal
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Add environment
          command: |
            cat packages/version >> $BASH_ENV
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run: sudo apt-get update && sudo apt-get install -y debhelper cmake python3-distutils devscripts ninja-build clang lld python3-github
      - run:
          name: Get repos
          command: |
            git clone git@github.com:leaningtech/cheerp-internal.git
            git clone https://github.com/leaningtech/cheerp-compiler cheerp-compiler
            git clone https://github.com/leaningtech/cheerp-utils.git
            git clone https://github.com/leaningtech/cheerp-musl.git
            git clone https://github.com/leaningtech/cheerp-libs.git
      - run:
          name: Set up workspace
          command: |
            mkdir pkg
            echo -e $GPG_KEY | gpg --import
            locale
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              echo "export CHANGELOG_MESSAGE="Release ${VERSION_NO}"" >> $BASH_ENV
              echo 'export PPA="ppa:leaningtech-dev/cheerp-ppa"' >> $BASH_ENV
              cd cheerp-compiler && git checkout << pipeline.parameters.release-tag >>
              cd ../cheerp-utils && git checkout << pipeline.parameters.release-tag >>
              cd ../cheerp-musl && git checkout << pipeline.parameters.release-tag >>
              cd ../cheerp-libs && git checkout << pipeline.parameters.release-tag >>
            else
              echo 'export CHANGELOG_MESSAGE="Nightly build"' >> $BASH_ENV
              echo 'export PPA="ppa:leaningtech-dev/cheerp-nightly-ppa"' >> $BASH_ENV
              cd cheerp-compiler && git checkout << pipeline.parameters.cheerp-compiler-commit >>
              cd ../cheerp-utils && git checkout << pipeline.parameters.cheerp-utils-commit >>
              cd ../cheerp-musl && git checkout << pipeline.parameters.cheerp-musl-commit >>
              cd ../cheerp-libs && git checkout << pipeline.parameters.cheerp-libs-commit >>
            fi
      - run:
          name: Package cheerp-compiler
          working_directory: cheerp-compiler
          command: |
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              ../cheerp-internal/tools/releasing/llvm-clang_debian_archives.sh ${VERSION_NO} << pipeline.parameters.release-tag >>
            else
              ../cheerp-internal/tools/releasing/llvm-clang_debian_archives.sh ${VERSION_NO} << pipeline.parameters.cheerp-compiler-commit >>
            fi
            cd ../pkg
            tar -xvf cheerp-llvm-clang_${VERSION_NO}.orig.tar.gz > /dev/null
            cd cheerp-llvm-clang-${VERSION_NO}
            dch -D ${DISTRO} -b -v ${VERSION_NO}-1~${DISTRO} "${CHANGELOG_MESSAGE}" -m
            env -i HOME="$HOME" LC_CTYPE="${LC_ALL:-${LC_CTYPE:-$LANG}}" PATH="$PATH" USER="$USER" debuild -sa -S -kB5208673E6848661 --lintian-opts -v
      - run:
          name: Prepare cheerp-utils sources
          working_directory: cheerp-utils
          command: |
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              ../cheerp-internal/tools/releasing/utils_debian_archives.sh $VERSION_NO << pipeline.parameters.release-tag >>
            else
              ../cheerp-internal/tools/releasing/utils_debian_archives.sh $VERSION_NO << pipeline.parameters.cheerp-utils-commit >>
            fi
            cd ../pkg
            tar -xf cheerp-utils_${VERSION_NO}.orig.tar.gz
            cd cheerp-utils-${VERSION_NO}
            dch -b -v ${VERSION_NO}-1~${DISTRO} "${CHANGELOG_MESSAGE}" -D ${DISTRO} -m
            sed -i "s/\${source:Version}/${VERSION_NO}/g" debian/control
            debuild -sa -S -kB5208673E6848661 -d
      - run:
          name: Prepare cheerp-musl sources
          working_directory: cheerp-musl
          command: |
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              ../cheerp-internal/tools/releasing/musl_debian_archives.sh $VERSION_NO << pipeline.parameters.release-tag >>
            else
              ../cheerp-internal/tools/releasing/musl_debian_archives.sh $VERSION_NO << pipeline.parameters.cheerp-musl-commit >>
            fi
            cd ../pkg
            tar -xf cheerp-musl_${VERSION_NO}.orig.tar.gz
            cd cheerp-musl-${VERSION_NO}
            dch -b -v ${VERSION_NO}-1~${DISTRO} "${CHANGELOG_MESSAGE}" -D ${DISTRO} -m
            sed -i "s/\${source:Version}/${VERSION_NO}/g" debian/control
            debuild -sa -S -kB5208673E6848661 -d
      - run:
          name: Prepare libcxx-libcxxabi sources
          working_directory: cheerp-compiler
          command: |
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              ../cheerp-internal/tools/releasing/libcxx-libcxxabi_debian_archives.sh $VERSION_NO << pipeline.parameters.release-tag >>
            else
              ../cheerp-internal/tools/releasing/libcxx-libcxxabi_debian_archives.sh $VERSION_NO << pipeline.parameters.cheerp-compiler-commit >>
            fi
            cd ../pkg
            tar -xf cheerp-libcxx-libcxxabi_${VERSION_NO}.orig.tar.gz
            cd cheerp-libcxx-libcxxabi-${VERSION_NO}
            rm -rf debian/
            cp -rv runtimes/debian/ debian/
            dch -b -v ${VERSION_NO}-1~${DISTRO} "${CHANGELOG_MESSAGE}" -D ${DISTRO} -m
            sed -i "s/\${source:Version}/${VERSION_NO}/g" debian/control
            debuild -sa -S -kB5208673E6848661 -d
      - run:
          name: Prepare cheerp-libs sources
          working_directory: cheerp-libs
          command: |
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              ../cheerp-internal/tools/releasing/libs_debian_archives.sh ${VERSION_NO} << pipeline.parameters.release-tag >>
            else
              ../cheerp-internal/tools/releasing/libs_debian_archives.sh ${VERSION_NO} << pipeline.parameters.cheerp-libs-commit >>
            fi
            cd ../pkg
            tar -xf cheerp-libs_${VERSION_NO}.orig.tar.gz
            cd cheerp-libs-${VERSION_NO}
            dch -b -v ${VERSION_NO}-1~${DISTRO} "${CHANGELOG_MESSAGE}" -D ${DISTRO} -m
            sed -i "s/\${source:Version}/${VERSION_NO}/g" debian/control
            debuild -sa -S -kB5208673E6848661 -d
      - run:
          name: Prepare cheerp metapackage sources
          working_directory: cheerp-internal/tools/releasing
          command: |
            GZIP="-n" tar -czf cheerp-core_${VERSION_NO}.orig.tar.gz cheerp-core
            cd cheerp-core
            dch -b -v ${VERSION_NO}-1~${DISTRO} "${CHANGELOG_MESSAGE}" -D ${DISTRO} -m
            sed -i "s/\${source:Version}/${VERSION_NO}/g" debian/control
            debuild -sa -S -kB5208673E6848661 -d
      - run:
          name: Publish
          working_directory: pkg
          command: |
            dput ${PPA} cheerp-llvm-clang*_source.changes
            dput ${PPA} cheerp-utils*_source.changes
            dput ${PPA} cheerp-musl*_source.changes
            dput ${PPA} cheerp-libcxx-libcxxabi*_source.changes
            dput ${PPA} cheerp-libs*_source.changes
            dput ${PPA} ../cheerp-internal/tools/releasing/cheerp-core*_source.changes
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              cp cheerp-llvm-clang_${VERSION_NO}.orig.tar.gz cheerp-llvm-clang-${VERSION_NO}.tar.gz
              python3 ../cheerp-internal/tools/releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" cheerp-llvm-clang-${VERSION_NO}.tar.gz cheerp-llvm-clang-${VERSION_NO}.tar.gz
              cp cheerp-utils_${VERSION_NO}.orig.tar.gz cheerp-utils-${VERSION_NO}.tar.gz
              cp cheerp-musl_${VERSION_NO}.orig.tar.gz cheerp-musl-${VERSION_NO}.tar.gz
              cp cheerp-libs_${VERSION_NO}.orig.tar.gz cheerp-libs-${VERSION_NO}.tar.gz
              python3 ../cheerp-internal/tools/releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" cheerp-utils-${VERSION_NO}.tar.gz cheerp-utils-${VERSION_NO}.tar.gz
              python3 ../cheerp-internal/tools/releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" cheerp-musl-${VERSION_NO}.tar.gz cheerp-musl-${VERSION_NO}.tar.gz
              python3 ../cheerp-internal/tools/releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" cheerp-libs-${VERSION_NO}.tar.gz cheerp-libs-${VERSION_NO}.tar.gz
            fi
  build-cheerp-headers-and-libs:
    docker:
      - image: leaningtech/cheerp_ci_base:20.04
    resource_class: medium
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Set up workspace
          command: |
            cat ~/project/packages/version >> $BASH_ENV
            mkdir -p /opt/cheerp/
      - add_ssh_keys:
          fingerprints:
            - "86:3b:c9:a6:d1:b9:a8:dc:0e:00:db:99:8d:19:c4:3e"
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $RPM_HOST >> ~/.ssh/known_hosts
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Clone dependencies
          command: |
            git clone git@github.com:leaningtech/cheerp-libs-addon.git
      - install-deb:
          package-name: llvm-clang
      - install-deb:
          package-name: utils
      - install-deb:
          package-name: musl
      - install-deb:
          package-name: libcxx-libcxxabi
      - install-deb:
          package-name: libs
      - run:
          name: get cheerp dependencies
          working_directory: ~/project
          command: |
            dpkg -x ~/project/packages/cheerp-utils_${VERSION_NO}-*.deb .
            dpkg -x ~/project/packages/cheerp-musl_${VERSION_NO}-*.deb .
            dpkg -x ~/project/packages/cheerp-libcxx-libcxxabi_${VERSION_NO}-*.deb .
            dpkg -x ~/project/packages/cheerp-libs_${VERSION_NO}-*.deb .
            cp -v usr/share/doc/cheerp-libcxx-libcxxabi/LICENSE.TXT.cheerp-libcxx.gz opt/cheerp/LICENSE.TXT.cheerp-libcxx.gz
            cp -v usr/share/doc/cheerp-libcxx-libcxxabi/LICENSE.TXT.cheerp-libcxxabi.gz opt/cheerp/LICENSE.TXT.cheerp-libcxxabi.gz
            cp -v usr/share/doc/cheerp-musl/COPYRIGHT.gz opt/cheerp/COPYRIGHT.musl.gz
            cp -v usr/share/doc/cheerp-libs/LICENSE.TXT.cheerp-libs.gz opt/cheerp/LICENSE.TXT.cheerp-libs.gz
      - run:
          name: build cheerp-libs-addon
          working_directory: ~/project/cheerp-libs-addon
          command: |
            mkdir build_genericjs
            cd build_genericjs
            cmake -DCMAKE_INSTALL_PREFIX="$PWD/../../opt/cheerp/" -DCMAKE_BUILD_TYPE=Release -DCHEERP_LINEAR_OUTPUT="" -DCMAKE_TOOLCHAIN_FILE=/opt/cheerp/share/cmake/Modules/CheerpToolchain.cmake -DCHEERP_MODE=genericjs ..
            make
            make install
            cd ..
            mkdir build_asmjs
            cd build_asmjs
            cmake -DCMAKE_INSTALL_PREFIX="$PWD/../../opt/cheerp/" -DCMAKE_BUILD_TYPE=Release -DCHEERP_LINEAR_OUTPUT="" -DCMAKE_TOOLCHAIN_FILE=/opt/cheerp/share/cmake/Modules/CheerpToolchain.cmake -DCHEERP_MODE=asmjs ..
            make
            make install
      - when:
          condition:
            not:
              equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - run:
                name: Upload memprofui.js
                working_directory: ~/project/cheerp-libs-addon/
                command: scp -P 2223 build_asmjs/memprofui.js leaningtech@136.243.170.209:/srv/web/cheerp/
      - run:
          name: Generate libs packages
          working_directory: ~/project
          command: |
            tar -cvjf packages/cheerp-headers-and-libs-${VERSION_NO}.tar.bz2 -C opt/cheerp .
            tar -cvjf packages/cheerp-headers-and-libs-${VERSION_NO}-proprietary.tar.bz2 -C opt/cheerp .
      - persist_to_workspace:
          root: packages
          paths:
            - cheerp-headers-and-libs-*.tar.bz2
            - cheerp-headers-and-libs-*-proprietary.tar.bz2
  build-macos:
    docker:
      - image: leaningtech/cheerp_macos_base:20.04
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
    resource_class: large
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Set up workspace
          command: |
            mkdir /opt/cheerp/
            mkdir -p ~/project/Applications
            cat ~/project/packages/version >> $BASH_ENV
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Clone dependencies
          command: |
            git clone https://github.com/leaningtech/cheerp-compiler
            git clone https://github.com/leaningtech/cheerp-utils
            git clone git@github.com:leaningtech/cheerp-internal.git
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              cd cheerp-compiler && git checkout << pipeline.parameters.release-tag >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.release-tag >> && cd ..
            else
              cd cheerp-compiler && git checkout << pipeline.parameters.cheerp-compiler-commit >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.cheerp-utils-commit >>
            fi
      - run:
          name: Build osxcross
          working_directory: /osxcross
          command: |
            cp ~/project/cheerp-internal/tools/circleci/macos/MacOSX11.3.sdk.tar.xz tarballs/
            UNATTENDED=1 ./build.sh
      - build-tblgen
      - run:
          name: Build cheerp-compiler
          working_directory: ~/project/cheerp-compiler
          command: |
            mkdir build
            cd build
            cmake -C ../llvm/CheerpCmakeConf.cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=../../cheerp-internal/tools/circleci/macos/MacCrossToolchain.cmake \
              -DLLVM_HOST_TRIPLE=x86_64-apple-darwin \
              -DLLVM_ENABLE_THREADS=OFF \
              -DCMAKE_CROSSCOMPILING=True \
              -DCLANG_VENDOR="Cheerp ${VERSION_NO}" \
              -DCMAKE_INSTALL_PREFIX=/Applications/cheerp/ \
              -DLLVM_ENABLE_LIBCXX=ON \
              -DLLVM_ENABLE_PROJECTS=clang \
              ../llvm/ \
              -GNinja \
              -DLLVM_TABLEGEN=../build-tblgen/bin/llvm-tblgen \
              -DCLANG_TABLEGEN=../build-tblgen/bin/clang-tblgen
            ninja -j6 distribution
            DESTDIR=~/project ninja install-distribution
      - run:
          name: Create macos package
          working_directory: ~/project/cheerp-compiler/build
          command: |
            cp -v ../llvm/LICENSE.TXT ~/project/Applications/cheerp/LICENSE.TXT.cheerp-llvm-clang
            tar -xf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}.tar.bz2 -C ~/project/Applications/cheerp

            rm -rf cheerp-utils-build
            mkdir cheerp-utils-build
            cd cheerp-utils-build
            cmake -DCMAKE_INSTALL_PREFIX=/Applications/cheerp/ ~/project/cheerp-utils/
            cd ..
            make -C cheerp-utils-build
            cp cheerp-utils-build/CheerpCommon.cmake ~/project/Applications/cheerp/share/cmake/Modules/
            cp cheerp-utils-build/CheerpToolchain.cmake ~/project/Applications/cheerp/share/cmake/Modules/
            cp cheerp-utils-build/CheerpWasmToolchain.cmake ~/project/Applications/cheerp/share/cmake/Modules/
            cp cheerp-utils-build/cheerpwrap ~/project/Applications/cheerp/bin/
            tar -cvjf ~/project/packages/cheerp-macosx-${VERSION_NO}.tar.bz2 -C ~/project/Applications/ cheerp
      - persist_to_workspace:
          root: packages
          paths:
            - cheerp-macosx-*.tar.bz2
  build-windows:
    docker:
      - image: leaningtech/cheerp_win_base:20.04
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
    resource_class: large
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Set up workspace
          command: |
            cat ~/project/packages/version >> $BASH_ENV
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Clone dependencies
          command: |
            git clone https://github.com/leaningtech/cheerp-compiler
            git clone https://github.com/leaningtech/cheerp-utils
            git clone git@github.com:leaningtech/cheerp-internal.git
            if [ << pipeline.parameters.release-tag >> != 'master' ]; then
              cd cheerp-compiler && git checkout << pipeline.parameters.release-tag >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.release-tag >> && cd ..
            else
              cd cheerp-compiler && git checkout << pipeline.parameters.cheerp-compiler-commit >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.cheerp-utils-commit >>
            fi
      - build-tblgen
      - run:
          name: Build cheerp-compiler
          working_directory: ~/project/cheerp-compiler
          command: |
            mkdir build
            cd build
            cmake \
              -C ~/project/cheerp-compiler/llvm/CheerpCmakeConf.cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=~/project/cheerp-internal/tools/windows_crosscompile/Mingw.cmake \
              -DCMAKE_CXX_FLAGS_RELEASE="-static-libgcc -static-libstdc++ -static -DNDEBUG" \
              -DCMAKE_C_FLAGS_RELEASE="-static-libgcc -static-libstdc++ -static -DNDEBUG" \
              -DCMAKE_INSTALL_PREFIX="c:\cheerp" \
              -DCLANG_VENDOR="Cheerp ${VERSION_NO}" \
              -DLLVM_ENABLE_PIC=OFF \
              -DLLVM_ENABLE_THREADS=OFF \
              -DCMAKE_EXE_LINKER_FLAGS="-Wl,--large-address-aware" \
              -DLLVM_ENABLE_PROJECTS=clang \
              -DLLVM_INCLUDE_BENCHMARKS=OFF \
              -GNinja ../llvm/ \
              -DLLVM_TABLEGEN=../build-tblgen/bin/llvm-tblgen \
              -DCLANG_TABLEGEN=../build-tblgen/bin/clang-tblgen
            ninja -j6 distribution
      - run:
          name: Install distrubution
          working_directory: ~/project/cheerp-compiler/build
          command: |
            cmake -DCMAKE_INSTALL_COMPONENT="opt" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="clang-resource-headers" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="clang" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="llc" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="llvm-dis" -P cmake_install.cmake
            cmake -DCMAKE_INSTALL_COMPONENT="llvm-link" -P cmake_install.cmake
      - run:
          name: Add includes and libraries
          working_directory: ~/project/cheerp-compiler/build
          command: |
            tar -xvf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}.tar.bz2 -C "c:/cheerp/"
            cp -v ~/project/cheerp-compiler/llvm/LICENSE.TXT "c:/cheerp/LICENSE.TXT.cheerp-llvm-clang"
      - run:
          name: Build cheerp-utils
          working_directory: ~/project/cheerp-compiler/build
          command: |
            mkdir cheerp-utils-build
            cd cheerp-utils-build
            cmake -DCMAKE_INSTALL_PREFIX="c:\cheerp" ~/project/cheerp-utils/
            make
      - run:
          name: Override cheerp-utils files
          working_directory: ~/project/cheerp-compiler/build
          command: |
            sed -i "s@/@\\\\\\\\@g" cheerp-utils-build/CheerpToolchain.cmake
            sed -i "s@/@\\\\\\\\@g" cheerp-utils-build/CheerpCommon.cmake
            sed -i "s@/@\\\\\\\\@g" cheerp-utils-build/CheerpWasmToolchain.cmake
            cp cheerp-utils-build/CheerpCommon.cmake "c:/cheerp/share/cmake/Modules/"
            cp cheerp-utils-build/CheerpToolchain.cmake "c:/cheerp/share/cmake/Modules/"
            cp cheerp-utils-build/CheerpWasmToolchain.cmake "c:/cheerp/share/cmake/Modules/"
      - run:
          name: Manually patch executable paths
          working_directory: ~/project/cheerp-compiler/build
          command: |
            sed -i "s/clang /clang.exe /g" "c:/cheerp/share/cmake/Modules/CheerpCommon.cmake"
            sed -i "s/clang++ /clang++.exe /g" "c:/cheerp/share/cmake/Modules/CheerpCommon.cmake"
            sed -i "s/llvm-link /llvm-link.exe /g" "c:/cheerp/share/cmake/Modules/CheerpCommon.cmake"
            cp cheerp-utils-build/cheerpwrap "c:/cheerp/bin/"
      - run:
          name: Create windows archive
          working_directory: ~/project/cheerp-compiler/build/c:/
          command: |
            zip -r ~/project/packages/cheerp-win-${VERSION_NO}.zip cheerp/
      - persist_to_workspace:
          root: packages
          paths:
            - cheerp-win-*.zip
  cheerp-proprietary-package:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Set up workspace
          command: |
            sudo mkdir -p /opt/cheerp/
            cat ~/project/packages/version >> $BASH_ENV
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Get dependencies
          command: |
            git clone git@github.com:leaningtech/cheerp-internal.git
      - run: mkdir macos
      - run:
          name: Create proprietary package for Macosx
          working_dir: ~/project/macos
          command: |
            tar -xf ~/project/packages/cheerp-macosx-${VERSION_NO}.tar.bz2
      - run:
          name: Overwrite headers and licenses
          working_dir: ~/project/macos
          command: |
            tar -C cheerp -xf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}-proprietary.tar.bz2
      - run:
          name: Overwrite LLVM/clang license
          working_dir: ~/project/macos
          command: |
            cp -v ~/project/cheerp-internal/tools/releasing/LICENSE.TXT.cheerp-llvm-clang.proprietary cheerp/LICENSE.TXT-cheerp-llvm-clang
      - run:
          name: Create proprietary tarball for macos
          working_dir: ~/project/macos
          command: |
            tar -cvjf ~/project/packages/cheerp-macosx-${VERSION_NO}-proprietary.tar.bz2 cheerp
      - run: mkdir linux
      - run:
          name: Make package for linux
          working_directory: ~/project/linux
          command: |
            dpkg -x ~/project/packages/cheerp-llvm-clang_${VERSION_NO}-*.deb .
            tar -C opt/cheerp -xf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}-proprietary.tar.bz2
            cp -v ~/project/cheerp-internal/tools/releasing/LICENSE.TXT.cheerp-llvm-clang.proprietary opt/cheerp/LICENSE.TXT-cheerp-llvm-clang
      - run:
          name: Create proprietary tarball for linux
          working_directory: ~/project/linux
          command: |
            tar -C opt/ -cvjf ~/project/packages/cheerp-linux-${VERSION_NO}-proprietary.tar.bz2 cheerp
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - cheerp-macosx-*-proprietary.tar.bz2
            - cheerp-linux-*-proprietary.tar.bz2
  create-dmg:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Set up workspace
          command: |
            sudo mkdir -p /opt/cheerp/
            sudo mkdir /dmg
            cat ~/project/packages/version >> $BASH_ENV
      - run: sudo apt-get update && sudo apt-get install linux-modules-extra-$(uname -r) cmake make python3-github
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Clone dependencies
          command: |
              git clone git@github.com:leaningtech/cheerp-internal.git
      - run:
          name: Set up libdmg-hfsplus
          command: |
            git clone https://github.com/leaningtech/libdmg-hfsplus.git
            cd libdmg-hfsplus
            cmake -DENABLE_SSL=False .
            make
      - mount-template-dmg
      - unpack-macos:
          package-name: ""
      - unmount-and-package:
          package-name: ""
      - mount-template-dmg
      - unpack-macos:
          package-name: "-proprietary"
      - unmount-and-package:
          package-name: "-proprietary"
      - run:
          name: Compress DMGs
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            ~/project/libdmg-hfsplus/dmg/dmg dmg cheerp-macosx-${VERSION_NO}-uncompressed.dmg cheerp-macosx-${VERSION_NO}.dmg
            ~/project/libdmg-hfsplus/dmg/dmg dmg cheerp-macosx-${VERSION_NO}-proprietary-uncompressed.dmg cheerp-macosx-${VERSION_NO}-proprietary.dmg
      - run:
          name: Store DMGs
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            cp cheerp-macosx-${VERSION_NO}.dmg ~/project/packages
            cp cheerp-macosx-${VERSION_NO}-proprietary.dmg ~/project/packages
      - when:
          condition:
            not:
              equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - run:
                name: Upload to Github
                working_directory: ~/project/cheerp-internal/tools/macosx_package
                command: |
                  python3 -m pip install pygithub
                  python3 ../releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" cheerp-macosx-${VERSION_NO}.dmg cheerp-macosx-${VERSION_NO}.dmg
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - cheerp-macosx-*.dmg
            - cheerp-macosx-*-proprietary.dmg
  create-windows-exe:
    docker:
      - image: leaningtech/cheerp_win_base:20.04
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Set up workspace
          command: |
            mkdir -p /opt/cheerp/
            cat ~/project/packages/version >> $BASH_ENV
      - run: apt-get update && apt-get install -y python3-github
      - run:
          name: Add known hosts
          command: |
            mkdir -p ~/.ssh
            echo $GH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Clone dependencies
          command: |
              git clone git@github.com:leaningtech/cheerp-internal.git
      - run:
          name: Create windows package
          working_directory: ~/project/cheerp-internal/tools/windows_package
          command: |
            unzip ~/project/packages/cheerp-win-${VERSION_NO}.zip
            echo ${VERSION_NO}
            cmake -DCHEERP_VERSION=${VERSION_NO} .
            make package
            cp Cheerp-${VERSION_NO}-Windows.exe ~/project/packages/
      - when:
          condition:
            not:
              equal: [ master, << pipeline.parameters.release-tag >> ]
          steps:
            - run:
                name: Upload to Github
                working_directory: ~/project/cheerp-internal/tools/windows_package
                command: python3 ../releasing/github_upload.py << pipeline.parameters.release-tag >> "Cheerp ${VERSION_NO}" Cheerp-${VERSION_NO}-Windows.exe Cheerp-${VERSION_NO}-Windows.exe
      - run:
          name: Create commercial package
          working_directory: ~/project/cheerp-internal/tools/windows_package
          command: |
            tar -C cheerp/ -xf ~/project/packages/cheerp-headers-and-libs-${VERSION_NO}-proprietary.tar.bz2
            cp ../releasing/LICENSE.TXT.cheerp-llvm-clang.proprietary cheerp/LICENSE.TXT.cheerp-llvm-clang
            cmake -DCHEERP_VERSION=$VERSION_NO . -DCHEERP_PROPRIETARY=1
            make package
            mv Cheerp-${VERSION_NO}-Windows.exe ~/project/packages/Cheerp-${VERSION_NO}-Windows-proprietary.exe
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - Cheerp-*-Windows.exe
            - Cheerp-*-Windows-proprietary.exe
  store-results:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/project/packages
      - store_artifacts:
          path: ~/project/packages

commands:
  create-deb:
    parameters:
      directory:
        type: string
      package-name:
        type: string
    steps:
      - build-internal:
          directory: << parameters.directory >>
          package-name: << parameters.package-name >>
      - install-deb:
          package-name: << parameters.package-name >>
  run-llvm-tests:
    parameters:
      rule:
        type: string
    steps:
      - attach_workspace:
          at: ~/project/packages
      - run:
          name: Install and setup ccache
          command: |
            apt update && apt install -y ccache
      - run: mkdir ~/project/cheerp-compiler
      - run:
          name: Extract archive
          working_directory: ~/project/cheerp-compiler
          command: |
            mv ~/project/packages/cheerp-build.tar.bz2 .
            tar -xf cheerp-build.tar.bz2
      - run:
          name: Run llvm << parameters.rule >>
          working_directory: ~/project/cheerp-compiler/build
          command: ninja -j6 << parameters.rule >>
  run-cheerp-tests:
    parameters:
      target:
        type: string
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Get tests
          command: |
            git clone https://github.com/leaningtech/cheerp-utils.git
            cd cheerp-utils
            if [ << pipeline.parameters.release-tag >> != master ]; then
              git checkout << pipeline.parameters.release-tag >>
            else
              git checkout << pipeline.parameters.cheerp-utils-commit >>
            fi
      - run: mkdir -p /opt/cheerp
      - install-deb:
          package-name: llvm-clang
      - install-deb:
          package-name: utils
      - install-deb:
          package-name: musl
      - install-deb:
          package-name: libcxx-libcxxabi
      - install-deb:
          package-name: libs
      - run:
          name: test
          working_directory: ~/project/cheerp-utils/tests
          command: ./run_tests.py --<< parameters.target >> --determinism=3 --determinism-probability=0.2 "/opt/cheerp/bin/clang++" "node --experimental-wasm-reftypes" -j4
          no_output_timeout: 30m
      - run:
          name: Store test results
          command: |
            mkdir -p ~/project/testResults
            mv ~/project/cheerp-utils/tests/testReport.test ~/project/<< parameters.target >>testResults
      - store_artifacts:
          path: ~/project/<< parameters.target >>testResults
  build-internal:
    parameters:
      directory:
        type: string
      package-name:
        type: string
    steps:
      - run:
          name: Build cheerp-<< parameters.package-name >>
          working_directory: ~/project/<< parameters.directory >>
          command: |
            dch -b -v ${VERSION_NO}-1 "Internal build" -m
            dpkg-buildpackage -d -b
            mv ../cheerp-<< parameters.package-name >>_*.deb ../packages/
  install-deb:
    parameters:
      package-name:
        type: string
    steps:
     - run:
          name: Set up cheerp-<< parameters.package-name >>
          working_directory: ~/project/packages
          command: |
            mkdir tmp
            dpkg -x cheerp-<< parameters.package-name >>_*.deb tmp
            cp -rv tmp/opt/cheerp/* /opt/cheerp
            rm -rf tmp
  add-yum-configuration:
    steps:
      - run:
          name: Add yum configuration
          command: |
            if [ << pipeline.parameters.release-tag >> != "master" ]; then

            cat \<< EOF > /etc/yum.repos.d/cheerp.repo
            [Cheerp-Stable]
            name=Cheerp Stable
            gpgcheck=1
            gpgkey=https://rpm.leaningtech.com/RPM-GPG-KEY-leaningtech
            enabled=1
            baseurl=https://rpm.leaningtech.com/stable
            EOF

            else

            cat \<< EOF > /etc/yum.repos.d/cheerp.repo
            [Cheerp-Nightly]
            name=Cheerp Nightly
            gpgcheck=1
            gpgkey=https://rpm.leaningtech.com/RPM-GPG-KEY-leaningtech
            enabled=1
            baseurl=https://rpm.leaningtech.com/nightly
            EOF

            fi
  set-up-rpm-workspace:
    steps:
      - run:
          name: Set up workspace
          command: |
            mkdir pkg
            echo -e $GPG_KEY | gpg --import
            echo -e $PUBLIC_GPG_KEY > public
            rpm --import public
            rm public
            echo "%_signature gpg" >> ~/.rpmmacros
            echo "%_gpg_name ci@leaningtech.com" >> ~/.rpmmacros
  get-rpm-repo:
    steps:
     - run:
          working_directory: ~/
          command: |
              rsync -a --delete-after -e 'ssh -p 2223' leaningtech@136.243.170.209:/srv/web/rpm/$CHAN ${REPO_DIR}/
  create-rpm-package:
    parameters:
      directory:
        type: string
      package-name:
        type: string
      branch-name:
        type: string
        default: master
    steps:
      - add-rpm-sources:
          directory: << parameters.directory >>
          package-name: << parameters.package-name >>
          branch-name: << parameters.branch-name >>
      - build-deploy-rpm:
          directory: << parameters.directory >>
          package-name: << parameters.package-name >>
  add-rpm-sources:
    parameters:
      directory:
        type: string
      package-name:
        type: string
      branch-name:
        type: string
        default: master
    steps:
      - run:
          name: Add cheerp-<< parameters.package-name >> sources
          working_directory: ~/project/<< parameters.directory >>
          command: |
            if [ << pipeline.parameters.release-tag >> != master ]; then
              ../cheerp-internal/tools/releasing/<< parameters.package-name >>_debian_archives.sh ${VERSION_NO} << pipeline.parameters.release-tag >>
            else
              ../cheerp-internal/tools/releasing/<< parameters.package-name >>_debian_archives.sh ${VERSION_NO} << parameters.branch-name >>
            fi
            rm -rf rpmbuild/SOURCES
            mkdir rpmbuild/SOURCES
            mv ../pkg/* rpmbuild/SOURCES
  build-deploy-rpm:
    parameters:
      directory:
        type: string
      package-name:
        type: string
    steps:
      - run:
          name: Build cheerp-<< parameters.package-name >>
          working_directory: ~/project/<< parameters.directory >>
          command: |
            sed -i "s/Version: .*/Version: ${VERSION_NO}/" rpmbuild/SPECS/cheerp-<< parameters.package-name >>.spec
            rpmbuild -ba rpmbuild/SPECS/cheerp-<< parameters.package-name >>.spec --define "_topdir ${PWD}/rpmbuild"
            rpm --addsign rpmbuild/RPMS/x86_64/cheerp-<< parameters.package-name >>-${VERSION_NO}-1.el8.x86_64.rpm
      - run:
          name: Deploy cheerp-<< parameters.package-name >>
          working_directory: ~/
          command: |
            cp ~/project/<< parameters.directory >>/rpmbuild/RPMS/x86_64/cheerp-<< parameters.package-name >>-${VERSION_NO}-1.el8.x86_64.rpm ${REPO_DIR}/${CHAN}
            . ~/project/cheerp-internal/tools/releasing/rpm_utils.sh
            repo_update
      - run:
          name: Install cheerp-<< parameters.package-name >>-${VERSION_NO}-1.el8
          working_directory: ~/
          command: |
            dnf clean all
            dnf install -y cheerp-<< parameters.package-name >>-${VERSION_NO}-1.el8
  build-tblgen:
    steps:
      - run:
          name: Build tablegen
          working_directory: ~/project/cheerp-compiler
          command: |
            mkdir build-tblgen
            cd build-tblgen
            cmake -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Release ../llvm/ -GNinja
            ninja llvm-tblgen clang-tblgen
  mount-template-dmg:
    steps:
      - run:
          name: Mount template DMG
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            tar xjf cheerp-macosx-template.tar.bz2
            sudo mount $PWD/cheerp-macosx-template.dmg /dmg
  unpack-macos:
    parameters:
      package-name:
        type: string
    steps:
      - run:
          name: Unpack macox<< parameters.package-name >> package
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            sudo tar --no-overwrite-dir -xvjmf ~/project/packages/cheerp-macosx-${VERSION_NO}<< parameters.package-name >>.tar.bz2 -C /dmg
  unmount-and-package:
    parameters:
      package-name:
        type: string
    steps:
      - run:
          name: Unmount and package uncompressed DMG<< parameters.package-name >>
          working_directory: ~/project/cheerp-internal/tools/macosx_package
          command: |
            sudo umount /dmg
            mv cheerp-macosx-template.dmg cheerp-macosx-${VERSION_NO}<< parameters.package-name >>-uncompressed.dmg

parameters:
  release-tag:
    type: string
    default: "master"
  cheerp-compiler-commit:
    type: string
    default: << pipeline.git.revision >>
  cheerp-utils-commit:
    type: string
    default: "master"
  cheerp-musl-commit:
    type: string
    default: "master"
  cheerp-libs-commit:
    type: string
    default: "master"

workflows:
  build-cheerp-compiler:
    jobs:
      - define-version-no
      - build-cheerp-compiler:
          requires:
            - define-version-no
      - llvm-check:
          matrix:
            parameters:
              rule: ["check-llvm", "check-clang"]
          requires:
            - build-cheerp-compiler
      - build-libraries:
          requires:
            - define-version-no
            - build-cheerp-compiler
      - test:
          matrix:
            parameters:
              target: ["genericjs", "asmjs", "wasm", "preexecute", "preexecute-asmjs"]
          requires:
            - build-cheerp-compiler
            - build-libraries
      - RPM-cheerp-compiler:
          requires:
            - define-version-no
            - test
            - llvm-check
          filters:
            branches:
              only: master
      - RPM-libraries:
          requires:
            - RPM-cheerp-compiler
      - PPA:
          requires:
            - define-version-no
            - test
            - llvm-check
          filters:
            branches:
              only: master
      - build-cheerp-headers-and-libs:
          requires:
            - build-libraries
      - build-macos:
          requires:
            - build-cheerp-headers-and-libs
      - build-windows:
          requires:
            - build-cheerp-headers-and-libs
      - cheerp-proprietary-package:
          requires:
            - build-cheerp-headers-and-libs
            - build-macos
      - create-dmg:
          requires:
            - build-macos
            - cheerp-proprietary-package
      - create-windows-exe:
          requires:
            - build-windows
      - store-results:
          requires:
            - create-dmg
            - create-windows-exe
