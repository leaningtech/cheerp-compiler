# Autogenerated from /home/c/Downloads/cheerp/cheerp-compiler/compiler-rt/test/lit.common.configured.in
# Do not edit!

# Allow generated file to be relocatable.
from pathlib import Path
def path(p):
    if not p: return ''
    return str((Path(__file__).parent / p).resolve())


# Set attribute value if it is unset.
def set_default(attr, value):
  if not getattr(config, attr, None):
    setattr(config, attr, value)

# Generic config options for all compiler-rt lit tests.
set_default("target_triple", "cheerp-leaningtech-webbrowser-wasm")
set_default("target_cflags", " -Wthread-safety -Wthread-safety-reference -Wthread-safety-beta ")
set_default("host_arch", "")
set_default("target_arch", "cheerp")
set_default("host_os", "Cheerp")
set_default("llvm_build_mode", ".")
set_default("llvm_src_root", "/home/c/Downloads/cheerp/cheerp-compiler/llvm")
set_default("llvm_obj_root", "/usr/lib/llvm-16")
set_default("compiler_rt_src_root", "/home/c/Downloads/cheerp/cheerp-compiler/compiler-rt")
set_default("compiler_rt_obj_root", "/home/c/Downloads/cheerp/cheerp-compiler/compiler-rt/build")
set_default("enable_per_target_runtime_dir", False)
set_default("llvm_tools_dir", "/usr/lib/llvm-16/bin")
set_default("lit_tools_dir", "")
set_default("llvm_shlib_dir", "/usr/lib/llvm-16/./lib")
set_default("gnu_ld_executable", "/usr/bin/ld.bfd")
set_default("gold_executable", "/usr/bin/ld.gold")
set_default("clang", "/opt/cheerp/bin/clang")
set_default("compiler_id", "Clang")
set_default("python_executable", "/usr/bin/python3.10")
set_default("compiler_rt_debug", False)
set_default("compiler_rt_intercept_libdispatch", False)
set_default("compiler_rt_libdir", "/home/c/Downloads/cheerp/cheerp-compiler/compiler-rt/build/lib/cheerp")
set_default("emulator", "")
set_default("asan_shadow_scale", "")
set_default("memprof_shadow_scale", "")
set_default("apple_platform", "osx")
set_default("apple_platform_min_deployment_target_flag", "-mmacosx-version-min")
set_default("sanitizer_can_use_cxxabi", True)
set_default("sanitizer_uses_static_cxxabi", False)
set_default("sanitizer_uses_static_unwind", False)
set_default("has_lld", False)
set_default("can_symbolize", 1)
set_default("use_lld", False)
set_default("use_thinlto", False)
set_default("use_lto", config.use_thinlto)
set_default("android", False)
set_default("android_api_level", "")
set_default("android_serial", "")
set_default("android_files_to_push", [])
set_default("have_rpc_xdr_h", 0)
set_default("gwp_asan", False)
set_default("expensive_checks", False)
set_default("test_standalone_build_libs", False)
# True iff the test suite supports ignoring the test compiler's runtime library path
# and using `config.compiler_rt_libdir` instead. This only matters when the runtime
# library paths differ.
set_default("test_suite_supports_overriding_runtime_lib_path", False)
config.available_features.add('target-is-%s' % config.target_arch)

if config.enable_per_target_runtime_dir:
  set_default("target_suffix", "")
elif config.android:
  if config.target_arch == "i386":
    set_default("target_suffix", "-i686-android")
  else:
    set_default("target_suffix", "-%s-android" % config.target_arch)
else:
  set_default("target_suffix", "-%s" % config.target_arch)

set_default("have_zlib", "1")
set_default("libcxx_used", "")

# LLVM tools dir can be passed in lit parameters, so try to
# apply substitution.
config.llvm_tools_dir = lit_config.substitute(config.llvm_tools_dir)
config.clang = lit_config.substitute(config.clang)
config.compiler_rt_libdir = lit_config.substitute(config.compiler_rt_libdir)

if not os.path.exists(config.clang):
  lit_config.fatal("Can't find compiler on path %r" % config.clang)

import lit.llvm
lit.llvm.initialize(lit_config, config)

# Setup attributes common for all compiler-rt projects.
lit_config.load_config(config, "/home/c/Downloads/cheerp/cheerp-compiler/compiler-rt/test/lit.common.cfg.py")
